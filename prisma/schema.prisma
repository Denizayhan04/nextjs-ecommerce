datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Product {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  brand       String
  category    String
  inStock     Boolean
  image       String[]
  reviews     String[] @default([])



}

model Review {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    userId      String  @db.ObjectId
    productId   String @db.ObjectId
    userName    String
    rating      Int
    comment     String
    
    createdAt   DateTime @default(now())
    


}


model Order {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    userId        String    @db.ObjectId
    products      String[]
    totalPrice    Float     
    createdAt     DateTime @default(now())
    
    user User     @relation(fields: [userId],references: [id])
}


model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  surName        String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  gender         Int?
  createdAt      DateTime  @default(now())
  updateAt       DateTime  @updatedAt
  role           Role      @default(USER)
  accounts       Account[]
  reviews        String[]   @default([])
  order          Order[]



  

}

enum Role {
  USER
  ADMIN
}
